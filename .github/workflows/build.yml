name: 'Build'

on: [push, pull_request]

env:
  CI: true

jobs:
  prepare:
    name: 'Install dependencies'
    runs-on: ubuntu-latest
    env:
      YARN_CACHE_FOLDER: .yarn-cache
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        with:
          path: node_modules
          # path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-
      - run: yarn --frozen-lockfile --production=false
      - run: tar -czf dependencies.tar.gz node_modules
      - uses: actions/upload-artifact@v1
        with:
          name: dependencies
          path: dependencies.tar.gz

  # TODO: Update this when possible to include the node_modules folder. GH is updating artifact action soon to make this
  #  easier (https://github.com/actions/upload-artifact/issues/7#issuecomment-566114993), and cache action multiple path
  #  support is popular (https://github.com/actions/cache/issues/16)

  typecheck:
    needs: [prepare]
    name: 'Typecheck'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - uses: actions/download-artifact@v1
        with:
          name: dependencies
          path: .
      - run: tar -xzf dependencies.tar.gz
      - run: yarn typecheck
  linting:
    needs: [prepare]
    name: 'ESLint'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - uses: actions/download-artifact@v1
        with:
          name: dependencies
          path: .
      - run: tar -xzf dependencies.tar.gz
      - run: yarn lint --max-warnings=0
  test-interface:
    needs: [prepare]
    # This should actually include anything but parser and integration tests
    name: 'Interface tests'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - uses: actions/download-artifact@v1
        with:
          name: dependencies
          path: .
      - run: tar -xzf dependencies.tar.gz
      - run: yarn test:interface --runInBand
  test-parser:
    needs: [prepare]
    name: 'Parser tests'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - uses: actions/download-artifact@v1
        with:
          name: dependencies
          path: .
      - run: tar -xzf dependencies.tar.gz
      - run: yarn test:parser --runInBand
  test-integration:
    needs: [prepare]
    name: 'Integration tests'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - uses: actions/download-artifact@v1
        with:
          name: dependencies
          path: .
      - run: tar -xzf dependencies.tar.gz
      - run: yarn test:integration --runInBand
  build:
    needs: [prepare]
    name: 'Build'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - uses: actions/download-artifact@v1
        with:
          name: dependencies
          path: .
      - run: tar -xzf dependencies.tar.gz
      - name: Extract messages
        # We need to run extraction twice as Lingui has a bug where the second pass removes the default for messages with the same id as the default
        run: |
          yarn extract
          yarn extract
      - name: Production build
        run: |
          # Needed to ignore the mini-css-extract-plugin warnings which can not be fixed with a good solution
          CI=false
          REACT_APP_ENVIRONMENT_NAME=${GITHUB_REF##*/}
          REACT_APP_VERSION=$GITHUB_SHA
          # We already ran ESLint in a separate step
          DISABLE_AUTOMATIC_ESLINT=true
          yarn build
      - run: tar -czf build.tar.gz build
      - uses: actions/upload-artifact@v1
        with:
          name: build
          path: build.tar.gz

  docker-image:
    needs:
      [typecheck, linting, test-interface, test-parser, test-integration, build]
    name: 'Publish Docker image'
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: build
          path: .
      - run: tar -xzf build.tar.gz
      # Remove files we no longer need to speed up sending context to Docker
      - run: rm build.tar.gz
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@2.11
        with:
          name: wowanalyzer/wowanalyzer
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
# TODO: Sentry releases https://blog.sentry.io/2019/12/17/using-github-actions-to-create-sentry-releases
