import React from 'react';
import { formatPercentage } from 'common/format';
import SpellLink from 'common/SpellLink';

function suggest(when, tracker, suggestion) {
  let tracked = { generated: 0, wasted: 0, casts: 0 };
  //If an array of spells is passed, we manipulate the data to aggregate all the generated and wasted resources as well as the individual focus instances into 1 spell so that it can be displayed.
  if (Array.isArray(suggestion.spell)) {
    let newSuggestionSpell = { id: null };
    for (let i = 0; i < suggestion.spell.length; i++) {
      if (!tracker.buildersObj[suggestion.spell[i].id]) {
        continue;
      }
      if (newSuggestionSpell.id === null) {
        newSuggestionSpell = suggestion.spell[i];
      }
      tracked.generated += tracker.buildersObj[suggestion.spell[i].id].generated;
      tracked.wasted += tracker.buildersObj[suggestion.spell[i].id].wasted;
      tracked.casts += tracker.buildersObj[suggestion.spell[i].id].casts;
    }
    suggestion.spell = newSuggestionSpell;
  } else {
    tracked = tracker.buildersObj[suggestion.spell.id];
  }
  if (!tracked) {
    return;
  }

  const maxGenerated = tracked.generated + tracked.wasted;
  const wastedShare = (tracked.wasted / maxGenerated) || 0;
  const resourceNameLower = tracker.resource.name.toLowerCase();

  when(wastedShare).isGreaterThan(suggestion.minor)
    .addSuggestion((suggest, actual, recommended) => {
      return suggest(
        <>
          You are wasting {resourceNameLower} generated by <SpellLink id={suggestion.spell.id} />. {suggestion.extraSuggestion}
        </>,
      )
        .icon(suggestion.spell.icon)
        .actual(`${formatPercentage(wastedShare)}% wasted. Generated ${tracked.generated} out of ${maxGenerated} possible ${resourceNameLower}`)
        .recommended(`<${formatPercentage(suggestion.minor)}%  ${resourceNameLower} wasted is recommend`)
        .regular(suggestion.avg).major(suggestion.major);
    });
}

export default suggest;
